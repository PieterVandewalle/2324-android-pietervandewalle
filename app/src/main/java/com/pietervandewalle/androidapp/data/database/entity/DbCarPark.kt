package com.pietervandewalle.androidapp.data.database.entity

import androidx.room.Entity
import androidx.room.Index
import androidx.room.PrimaryKey
import com.pietervandewalle.androidapp.model.CarPark
import com.pietervandewalle.androidapp.model.GPSCoordinates
import java.time.LocalDateTime

/**
 * Represents an entity in the database for storing car park information.
 *
 * @param id The unique identifier for the car park. Automatically generated by the database.
 * @param name The name of the car park.
 * @param lastUpdate The timestamp of the last update for car park information.
 * @param totalCapacity The total capacity of the car park.
 * @param availableCapacity The currently available capacity of the car park.
 * @param description A description of the car park.
 * @param extraInfo Extra information about the car park (optional).
 * @param isOpenNow Indicates whether the car park is currently open.
 * @param isTemporaryClosed Indicates whether the car park is temporarily closed.
 * @param isFree Indicates whether the car park is free to use.
 * @param isInLEZ Indicates whether the car park is located in a Low Emission Zone (LEZ).
 * @param operator The operator of the car park.
 * @param location The GPS coordinates of the car park location.
 */
@Entity(
    tableName = "carParks",
    indices = [
        Index(
            value = ["name"],
            unique = true,
        ),
    ],
)
data class DbCarPark(
    @PrimaryKey(autoGenerate = true)
    val id: Int = 0,
    val name: String,
    val lastUpdate: LocalDateTime,
    val totalCapacity: Int,
    val availableCapacity: Int,
    val description: String,
    val extraInfo: String?,
    val isOpenNow: Boolean,
    val isTemporaryClosed: Boolean,
    val isFree: Boolean,
    val isInLEZ: Boolean,
    val operator: String,
    val location: GPSCoordinates,
)

/**
 * Converts a [CarPark] to a [DbCarPark] for storage in the database.
 *
 * @receiver The [CarPark] to be converted.
 * @return The corresponding [DbCarPark].
 */
fun CarPark.asDbCarPark(): DbCarPark =
    DbCarPark(
        id = id, name = name, lastUpdate = lastUpdate, totalCapacity = totalCapacity, availableCapacity = availableCapacity, description = description,
        extraInfo = extraInfo, isOpenNow = isOpenNow, isTemporaryClosed = isTemporaryClosed, isFree = isFree, isInLEZ = isInLEZ, operator = operator, location = location,
    )

/**
 * Converts a [DbCarPark] to a [CarPark] for use in the domain layer.
 *
 * @receiver The [DbCarPark] to be converted.
 * @return The corresponding [CarPark].
 */
fun DbCarPark.asDomainCarPark(): CarPark =
    CarPark(
        id = id, name = name, lastUpdate = lastUpdate, totalCapacity = totalCapacity, availableCapacity = availableCapacity, description = description,
        extraInfo = extraInfo, isOpenNow = isOpenNow, isTemporaryClosed = isTemporaryClosed, isFree = isFree, isInLEZ = isInLEZ, operator = operator, location = location,
    )

/**
 * Converts a list of [DbCarPark] objects to a list of [CarPark] objects for the domain layer.
 *
 * @receiver The list of [DbCarPark] objects to be converted.
 * @return The list of corresponding [CarPark] objects.
 */
fun List<DbCarPark>.asDomainCarParks(): List<CarPark> = map { it.asDomainCarPark() }
